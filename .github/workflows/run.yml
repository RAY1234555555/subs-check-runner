name: Run Subs-Check

on:
  schedule:
    - cron: '0 */12 * * *'  # 每6小时运行一次（0:00、6:00、12:00、18:00 UTC）
  workflow_dispatch:       # 允许手动触发
  push:
    paths:
      - 'config.yaml'      # 监听 config.yaml 的变化

jobs:
  run-subs-check:
    runs-on: ubuntu-latest
    steps:
      # 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 设置 Docker 环境
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 配置 Docker 镜像加速源
      - name: Configure Docker Mirror
        run: |
          sudo mkdir -p /etc/docker
          echo '{"registry-mirrors": ["https://docker.imgdb.de"]}' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      # 读取 url.txt 并生成 config.yaml
      - name: Prepare Config with Sub-URLs
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GIST_ID: ${{ secrets.GIST_ID }}
        run: |
          # 检查 url.txt 内容
          echo "Contents of url.txt:"
          cat url.txt
          # 生成 sub-urls
          SUB_URLS=$(cat url.txt | grep -v '^$' | sed 's/^[[:space:]]*/    - /; s/[[:space:]]*$//')
          # 生成 config.yaml
          cat <<EOF > config.yaml
          print-progress: true
          concurrent: 10  # 降低到10，适配 Actions 资源
          check-interval: 0
          timeout: 10000
          speed-test-url: https://gh-proxy.henryjiu.workers.dev/https://github.com/AaronFeng753/Waifu2x-Extension-GUI/releases/download/v2.21.12/Waifu2x-Extension-GUI-v2.21.12-Portable.7z
          min-speed: 256
          download-timeout: 15
          listen-port: ":8199"
          rename-node: false
          keep-success-proxies: false
          output-dir: "/app/output"
          save-method: gist
          github-gist-id: "$GIST_ID"
          github-token: "$GH_TOKEN"
          github-api-mirror: "https://2.ikunya.ggff.net/github"
          sub-urls:
          $SUB_URLS
          EOF
          echo "Generated config.yaml:"
          cat config.yaml

      # 运行 Subs-Check 容器
      - name: Run Subs-Check Container
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GIST_ID: ${{ secrets.GIST_ID }}
        run: |
          # 设置 1 小时超时，同步运行
          timeout 3600s docker run --rm \
            -v $(pwd)/config.yaml:/app/config/config.yaml \
            -v $(pwd)/output:/app/output \
            -e GH_TOKEN=$GH_TOKEN \
            -e GIST_ID=$GIST_ID \
            ghcr.io/beck-8/subs-check:latest
          EXIT_CODE=$?
          echo "Container exited with code: $EXIT_CODE"
          if [ "$EXIT_CODE" -ne 0 ]; then exit $EXIT_CODE; fi

      # 发送 Telegram 通知
      - name: Send Telegram Notification
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          NODE_COUNT=$(cat output/all.yaml | grep -c '^- ' || echo "0")
          MESSAGE="更新了 $NODE_COUNT 个节点"
          curl -s -X POST \
            "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="$MESSAGE"

      # 检查输出文件
      - name: Check Output
        run: |
          ls -la output/
          cat output/all.yaml || echo "No output file found"

      # 上传输出文件
      - name: Upload Output Artifact
        uses: actions/upload-artifact@v4
        with:
          name: subs-check-output
          path: output/
