name: Run Subs-Check

on:
  schedule:
    - cron: '0 */6 * * *'  # 每6小时运行一次（0:00、6:00、12:00、18:00 UTC）
  workflow_dispatch:       # 允许手动触发
  push:
    paths:
      - 'config.yaml'      # 监听 config.yaml 的变化

jobs:
  run-subs-check:
    runs-on: ubuntu-latest
    steps:
      # 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 设置 Docker 环境
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 配置 Docker 镜像加速源
      - name: Configure Docker Mirror
        run: |
          sudo mkdir -p /etc/docker
          echo '{"registry-mirrors": ["https://docker.imgdb.de"]}' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      # 读取 url.txt 并生成 config.yaml
      - name: Prepare Config with Sub-URLs
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GIST_ID: ${{ secrets.GIST_ID }}
        run: |
          # 从 url.txt 生成 sub-urls 部分
          SUB_URLS=$(cat url.txt | grep -v '^$' | sed 's/^/    - "/; s/$/"/')
          # 直接生成完整的 config.yaml
          cat <<EOF > config.yaml
          # 是否显示进度
          print-progress: true

          # 并发线程数
          concurrent: 20

          # 检查间隔(分钟)
          check-interval: 30

          # 超时时间(毫秒)(节点的最大延迟)
          timeout: 5000

          # 测速地址
          speed-test-url: https://gh-proxy.henryjiu.workers.dev/https://github.com/AaronFeng753/Waifu2x-Extension-GUI/releases/download/v2.21.12/Waifu2x-Extension-GUI-v2.21.12-Portable.7z

          # 最低测速结果舍弃(KB/s)
          min-speed: 1024

          # 下载测试时间(s)
          download-timeout: 10

          # 监听端口（GitHub Actions 不需要端口，可忽略）
          listen-port: ":8199"

          # 以节点IP查询位置重命名节点
          rename-node: false

          # 保留之前测试成功的节点
          keep-success-proxies: false

          # 输出目录（适配 GitHub Actions）
          output-dir: "./output"

          # Telegram 通知（直接使用 API，由工作流处理）
          recipient-url:
            - "telegram://placeholder"

          # 保存方法
          save-method: gist

          # Gist 配置
          github-gist-id: "$GIST_ID"
          github-token: "$GH_TOKEN"
          github-api-mirror: "https://2.ikunya.ggff.net/github"

          # 订阅地址
          sub-urls:
          $SUB_URLS
          EOF
          # 检查生成结果
          cat config.yaml

      # 运行 Subs-Check 容器
      - name: Run Subs-Check Container
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GIST_ID: ${{ secrets.GIST_ID }}
        run: |
          docker run -d --name subs-check \
            -v $(pwd)/config.yaml:/app/config \
            -v $(pwd)/output:/app/output \
            -e GH_TOKEN=$GH_TOKEN \
            -e GIST_ID=$GIST_ID \
            ghcr.io/beck-8/subs-check:latest
          # 等待容器运行完成（根据任务时间调整）
          sleep 300  # 等待5分钟
          docker logs subs-check

      # 发送 Telegram 通知
      - name: Send Telegram Notification
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          MESSAGE="Subs-Check completed at $(date). Check results at https://gist.github.com/$GIST_ID"
          curl -s -X POST \
            "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="$MESSAGE"

      # 检查输出文件
      - name: Check Output
        run: |
          ls -la output/
          cat output/all.yaml || echo "No output file found"

      # 上传输出文件（可选）
      - name: Upload Output Artifact
        uses: actions/upload-artifact@v4
        with:
          name: subs-check-output
          path: output/
